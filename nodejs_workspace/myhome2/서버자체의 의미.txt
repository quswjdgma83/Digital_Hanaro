1. nodejs는 자체적으로 웹서버/ WAS를 구축할 수 있는 라이브러리를 제공하고 있다.
http 라이브러리를 가지고 있다
createServer - 서버 소켓을 작성한다.
listen 함수 - 서버 소켓이 대기를 한다.

서버소켓 < ================ 클라이언트소켓 접속요청
    3000번 포트를 열어놓고 기다린다.
클라이언트 소켓을 하나 생성해서 클라이언트 소켓끼리 데이터를 주고받는다.
createServer에 전달된 매개변수가 콜백함수고 이 콜백함수는 나한테 접속한 클라이언트들로부터 정보를 받아오는 함수이다.

실제 물리적 파일과 url은 달라야 한다.
http://127.0.0.1:3000/ => /
http://127.0.0.1:3000/member/join => /member/join => 실제 물리적 파일까지 연결
서버가 물리적 파일 위치를 지정해줘야 한다.
a href="가상주소"

request 객체에 전달할 내용은 /member/join pathname으로 전달된다.
index/html => <a href="/member/join">회원가입</a>

react library, framework?
nextjs - react framework -> 프론트엔드, nextjs 안에서 서버처럼 쓸 수 있는 컴포넌트가 존재해서 디비를 직접 붙일 수 있긴 한데 이걸로
실개발을 하면 안됨

풀스택 개발: 프론트엔드와 백엔드를 쪼개서 각각 다른 별도의 프로세스로 실행 시켜서 비동기통신(Ajax통신)을 통해서 서로 데이터를 주고 받는다.
spa : single page application => 현재 프론트 개발이 이쪽으로 흘러감 -> 전체 페이지가 하나임
일부분( 보통 메뉴가 해당된다. router라고 부름)을 고정 시켜놓고 일부분만 체인지를 하는 방식 => 렌더링 속도가 빠르다. 화면전체가 로딩되는 것이 아니고
일부분만 교체 시키는 방식이라 화면 출력 속도가 빠르다.
단점: 백엔드 서버와 Ajax통신을 많이 해야 해서 네트워크 속도에 영향을 많이 받아 delay되는 경우가 있다.

    |   프론트엔드                              백엔드 서버
    |   react                                 nodejs
    |   spring boot의 thymeleaf               spring boot(restful api)
    |   vue                                   php
    |   안드로이드(코틀린, RN)                     asp
    |   아이폰(IOS, RN)                         asp.net